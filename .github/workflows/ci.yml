name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-repo:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: deploy to master
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.SERVER_IP_ADDRESS }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Pulling Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_PROD }}
            if [ $? -ne 0 ]; then
             echo "Docker image pull failed"
             exit 1
            fi

            echo "Stopping existing container..."
            docker stop server || true

            echo "Removing existing container..."
            docker rm server || true

            echo "Running new container..."
            docker run -d --rm --name server -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
              -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -e DATABASE_DRIVER=com.mysql.cj.jdbc.Driver \
              -e HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_PROD }}
            if [ $? -ne 0 ]; then
             echo "Docker container run failed"
             exit 1
            fi

      - name: sleep for a few seconds
        uses: GuillaumeFalourd/wait-sleep-action@v1
        with:
          time: '5'